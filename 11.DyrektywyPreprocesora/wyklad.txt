PREPROCESOR i co się dzieje przed kompilacją    <-- zawsze jest na egzaminie!

    Dyrektywy do preprocesora:

        #include    <nazwa biblioteki>          <-- dołączanie bibliotek
                                                    <> dla bibliotek standardowych
                                                    "" dla bibliotek w folderze projektu
        

        #ifdef ZMIENNA_PREPROCESOROWA           <-- sprawdza czy ZMIENNA_PREPROCESOROWA została zdefiniowana
                                                    wymaga #endif

        #ifdef __cplusplus                      <-- warunek wykona się wyłącznie jeśli plik kompliowany jest w C++


        #ifndef NAZWA_NP_BIBLIOTEKI             <-- jeśli nie zostało zdefiniowane,
                                                    wymaga #endif
                                                    wykorzystywana do jednokrotnego dodawania bibliotek

        #elif                                   <-- else if

        #else                                   <-- else

        #endif                                  <-- koniec ifa

        #define ZMIENNA <wartość>               <-- do definiowania zmiennych preprocesorowych, makrodefinicji 
                                                    do jednokrotnego dołączania bibliotek
                                                    wartość jest opcjonalna
                                                    NIE MA NA KOŃCU ŚREDNIKA, 
                                                    ANI "="

        #pragma once                            <-- żeby biblioteka była dołączona raz
                                                    pragma NIE JEST W STANDARDZIE
                                                    LEPIEJ NIE UŻYWAĆ

        #undef ZMIENNA_PREPROCESOROWA           <-- usuwa definicję ZMIENNA_PREPROCESOROWA
                                                    oddefiniowanie zmiennej, która nie istnieje nie spowoduje błędu

        #error "błąd kompolacji"                <-- Wymuszenie błędu kompilacji

        #line 1000                              <-- Nadpisanie numeru linii na 1000
                                                    Przydaje się jak masz w planie zirytować prowadzącego
                                                    Podobno ułatwia też debugowanie maszyny stanu


    Jednokrotne dołączanie bibliotek:
        #ifndef FUNKCJE_H
        #define FUNKCJE_H


        ///kod pliku .h


        #endif
                        

    Makrodefinicje:
        przykłady:                 
            #define FUNKCJE_H                                       <-- do jednokrotnego dołączania bibliotek
                
            #define MAX 5                                           <-- wyszukuje w pliku MAX i zamienia je na 5 przed kompilacją
                
            #define BEZWZGL(a) a > 0 ? a : -a                       <-- makrodefinicja ze zmienną (parametrem)
                                                                        służy do pisania krótkich makro funkcji 
                
            #define SUMA(a, b) a + b                                <-- ZŁE
                                                                        w przypadku SUMA(a, b) * 3 wynikiem będzie a + b * 3
                                                                        należy dodać nawiasy
                
            #define SUMA(a, b) (a + b)                              <-- DOBRE
                                                                        działa
                
            #define MNOZ(a,b) ((a) * (b))                           <-- nawiasy są potrzebne
                                                                        bez nawiasów zepsuje się przy MNOZ(2+1, 3)
                
            #define NAZWA(x) #x                                     <-- wyłuskuje nazwę zmiennej
                
            #define SCAL(x,y ) x ## y                               <-- składa dwie wartości
                                                                        na przykład dla SCAL(1, 2) kompilator zobaczy 12
                
            #define ZEWN_SCAL(x,y) SCAL(x,y)                        <-- w sumie działa
                                                                        można w ten sposób składać ze sobą makra 
                
            #define VARIABLE(t, a) t t##a                           <-- tworzy zmienną 
                                                                        np dla VARIABLE(int, zmienna) da zmienną int o nazwie "intzmienna"
                
            #define ZMIENNA_TYP(t,a) t SCAL(t,a)                    <-- działa jak powyższe VARIABLE
                                                                        oczywiście wymaga zdefiniowania SCAL
                
            #define SWAP(a,b,typ){typ p=a;a=b;b=p;}                 <-- Podmiana 2 zmiennych

            #define SWAP(a,b,typ) do {typ p=a;a=b;b=p;} while (0)   <-- działa jak powyższe, ale nie ma problemu z średnikiem

            #define STRNCMP(s1,rel,s2,n) (strncmp(s1,s2,n) rel 0)   <-- Podównywanie N pierwszych znaków w stringu
                                                                        WARTO ZERKNĄĆ NA WYKŁAD
            
            #define LISTA   \                                       <-- łamaine linii w define
                X(a1);      \                                           Wymaga zdefiniowania operacji X
                X(a2);      \
                X(a3);      \
                X(a4);      \
                X(b1);      \
                X(b2);      \

            #define X(a)    int a                                   <-- definicja operacji x do definicji 
            
        Leksemy:
            __cplusplus     <-- zdefiniowane jeśli kompilowane w C++

            __GNUC__        <-- zdefiniowane jeśli kopilowane w gcc lub g++

            i duuużo innych 
            jest w pliku  z wykładu

        Właściwości:
            Raczej nie powinno się wpisywać do makrodefinicji operacji (np -- lub ++)
            bo może to spowodować wielokrotne jej wykonanie (np przy BEZWZGL)

            Można korzystać z __LINE__ do wyłuskwiania numeru linii w pliku
            Przydaje się to na przykład przy debugowaniu

            Spacja między '#' a dyrektywą preprocesora nic nie zmiena

            Makrodefinicje mogą mieć zmienną liczbę argumentów, ale nie jest to jeszcze ustandaryzowane




    Ciekawostka:
        Klamry i inne znaki z klawiatury można włączyć opcję -trigraphs
        wtedy można np pisać ??< zamiast { oraz ??> zamiast } itp

        